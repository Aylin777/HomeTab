variables:
  REPO_NAME: gitlab.com/systemz/tasktab

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME

stages:
    - build
    - docker

.compile-backend:
    image: golang:latest
    stage: build
    script:
      - go get
      - go fmt $(go list ./... | grep -v /vendor/)
      - go vet $(go list ./... | grep -v /vendor/)
      - go test -race $(go list ./... | grep -v /vendor/)
      - CGO_ENABLED=0 go build -o $CI_PROJECT_DIR/tasktab
      - ls -alh $CI_PROJECT_DIR/
    artifacts:
      paths:
        - $CI_PROJECT_DIR/tasktab
    cache:
      paths:
        - $GOPATH/src/github.com/

.backend:
    stage: docker
    image: docker:stable
    services:
    - docker:stable-dind
    script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:pipeline-$CI_PIPELINE_ID --tag $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:pipeline-$CI_PIPELINE_ID
    - docker push $CI_REGISTRY_IMAGE:latest